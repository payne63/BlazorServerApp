@page "/personnes-lite"
@using BlazorServerApp.Db
@inject LiteDbPeopleService LitePeople

<PageTitle>Gestion des personnes (LiteDB)</PageTitle>

<RadzenHeading Size="HeadingSize.H1" Text="Gestion des personnes (LiteDB)" />

<RadzenStack Orientation="Orientation.Vertical" Gap="10px">
    <RadzenButton Icon="add" Text="Ajouter" Click="AddRow" Style="width:150px"/>
    <RadzenDataGrid TItem="PersonModel" Data="people" @ref="grid" EditMode="DataGridEditMode.Single"  RowEdit="model => enterInEditionMode=true" RowRemove="OnDeleteRow" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="PersonModel" Property="Nom" Title="Nom">
                <EditTemplate Context="person">
                    <RadzenTextBox @ref="NameEditionTextBox" @bind-Value="person.Nom" Style="width:100%" Name="Nom" />
                    <RadzenRequiredValidator Text="Nom requis" Component="Nom" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PersonModel" Property="Prenom" Title="Prénom">
                <EditTemplate Context="person">
                    <RadzenTextBox @bind-Value="person.Prenom" Style="width:100%" Name="Prenom" />
                    <RadzenRequiredValidator Text="Prénom requis" Component="Prenom" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PersonModel" Property="Mail" Title="Mail">
                <EditTemplate Context="person">
                    <RadzenTextBox @bind-Value="person.Mail" Style="width:100%" Name="Mail" />
                    <RadzenRequiredValidator Text="Mail requis" Component="Mail" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PersonModel" Property="Service" Title="Service">
                <Template Context="person">
                    @person.Service.GetDisplayName()
                </Template>
                <EditTemplate Context="person">
                    <RadzenDropDown Data="@serviceItems"
                                    TextProperty="Text"
                                    ValueProperty="Value"
                                    TValue="ServiceType"
                                    @bind-Value="person.Service"
                                    Name="Service"
                                    Style="width:100%" />
                    <RadzenRequiredValidator Text="Service requis" Component="Service" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PersonModel" Property="Qualification" Title="Qualification">
                <Template Context="person">
                    @GetQualificationText(person.Qualification)
                </Template>
                <EditTemplate Context="person">
                    <RadzenDropDown Data="@qualificationItems"
                                    TextProperty="Text"
                                    ValueProperty="Value"
                                    TValue="List<QualificationType>"
                                    @bind-Value="selectedQualifications"
                                    Multiple="true"
                                    Name="Qualification"
                                    Style="width:100%" />
                    <RadzenRequiredValidator Text="Au moins une qualification" Component="Qualification" />
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PersonModel" Context="person" TextAlign="TextAlign.Center" Width="140px">
                <Template Context="person">
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="() => StartEdit(person)" class="rz-mr-2" />
                    <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="() => DeleteRow(person)" />
                </Template>
                <EditTemplate Context="person">
                    <RadzenButton Icon="save" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Click="() => OnSaveRow(person)" class="rz-mr-2" />
                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="() => CancelEditRow(person)" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    RadzenDataGrid<PersonModel> grid;
    List<PersonModel> people = new();
    RadzenTextBox? NameEditionTextBox;
    bool enterInEditionMode = false;
    bool enterInUpdateMode = false;

    class ServiceItem { public ServiceType Value { get; set; } public string Text { get; set; } }
    List<ServiceItem> serviceItems = new();

    class QualificationItem { public QualificationType Value { get; set; } public string Text { get; set; } }
    List<QualificationItem> qualificationItems = new();
    List<QualificationType> selectedQualifications = new();

    protected override void OnInitialized()
    {
        people = LitePeople.GetAllActive();
        serviceItems = Enum.GetValues<ServiceType>()
            .Select(v => new ServiceItem { Value = v, Text = v.GetDisplayName() })
            .ToList();
        qualificationItems = Enum.GetValues<QualificationType>()
            .Where(q => q != QualificationType.None)
            .Select(v => new QualificationItem { Value = v, Text = ((Enum)(object)v).GetDisplayName() })
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if ( NameEditionTextBox is not null && enterInEditionMode) {
            await Task.Yield();
            await NameEditionTextBox.Element.FocusAsync();
            enterInEditionMode = false; 
        }
    }

    List<QualificationType> ToListFromFlags(QualificationType flags)
    {
        return Enum.GetValues<QualificationType>()
            .Where(v => v != QualificationType.None && flags.HasFlag(v))
            .ToList();
    }

    QualificationType ToFlagsFromList(IEnumerable<QualificationType> items)
    {
        var result = QualificationType.None;
        foreach (var it in items)
        {
            result |= it;
        }
        return result;
    }

    async void AddRow() {
        try {
            var newPerson = new PersonModel { Nom = string.Empty, Prenom = string.Empty, Mail = string.Empty, Service = serviceItems.First().Value, Qualification = QualificationType.None };
            people.Add(newPerson);
            selectedQualifications = new List<QualificationType>();
            await grid.Reload();
            await grid.EditRow(newPerson);
        }
        catch (Exception ex) {
            throw new Exception(ex.Message);
        }
    }

    void StartEdit(PersonModel person) {
        enterInUpdateMode = true;
        selectedQualifications = ToListFromFlags(person.Qualification);
        grid.EditRow(person);
    }

    string GetQualificationText(QualificationType q)
    {
        return string.Join(", ", q.GetFlagsDisplayNames());
    }

    async Task OnSaveRow(PersonModel person) {
        if (enterInUpdateMode) {
            enterInUpdateMode = false;
            await OnUpdateRow(person);
        }
        else {
            person.Qualification = ToFlagsFromList(selectedQualifications);
            LitePeople.Insert(person);
            grid.CancelEditRow(person);
            selectedQualifications.Clear();
            people = LitePeople.GetAllActive();
            await grid.Reload();
        }
    }

    async Task OnUpdateRow(PersonModel person)
    {
        person.Qualification = ToFlagsFromList(selectedQualifications);
        LitePeople.Update(person);
        grid.CancelEditRow(person);
        selectedQualifications.Clear();
        people = LitePeople.GetAllActive();
        await grid.Reload();
    }

    async Task DeleteRow(PersonModel person)
    {
        if (people.Contains(person))
        {
            people.Remove(person);
        }

        LitePeople.SoftDelete(person);
        people = LitePeople.GetAllActive();
        await grid.Reload();
    }
    

    async Task CancelEditRow(PersonModel person) {
        grid.CancelEditRow(person);
        if( !enterInUpdateMode) people.Remove(person);
        enterInUpdateMode = false;
        selectedQualifications.Clear();
        await grid.Reload();
    }
}
