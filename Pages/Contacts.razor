@page "/contacts"
@using Microsoft.EntityFrameworkCore
@inject DataBaseService dataBaseService
@inject DialogService dialogService

<PageTitle>Contacts</PageTitle>
<RadzenCard class=" rz-p-1 rz-mb-2"  >
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="m-2">
        <RadzenSelectBar @bind-Value="@_selectedViewType">
            <Items>
                <RadzenSelectBarItem Text="Cartes" Value="@ViewType.Card"/>
                <RadzenSelectBarItem Text="Grille" Value="@ViewType.Grid"/>
            </Items>
        </RadzenSelectBar>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add_circle_outline" Text="Add Contact"
                      Click="@InsertRow" Disabled="@(_isEditMode)" Visible="@(_selectedViewType == ViewType.Grid)"/>
</RadzenStack>
</RadzenCard>

@if (_models == null)
{
    <RadzenText TextStyle="TextStyle.H5" Style="font-style:italic" class="rz-m-10">
        Loading Services...
    </RadzenText>
}
else if (_selectedViewType == ViewType.Grid)
{
    <RadzenDataGrid AllowMultiColumnSorting="true" AllowAlternatingRows="false" AllowFiltering="true"
                    FilterMode="FilterMode.Simple" AllowSorting="true" AllowColumnResize="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" GridLines="DataGridGridLines.Vertical"
                    Data="@_models" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single" TItem="ContactModel" @ref="_radzenDataGrid"
                    Density="Density.Compact" RowCreate="@OnCreateRow" RowUpdate="@OnUpdateRow" class="rz-border-radius-1">
        <Columns>
            <RadzenDataGridColumn Context="ContactModel" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Resizable="false" Title="Edition"
                                  Frozen="true" Width="100px">
                <Template Context="contactModel">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(_ => EditRow(contactModel))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(_ => DeleteRow(contactModel))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="contactModel">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(_ => SaveRow(contactModel))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(_ => CancelEdit(contactModel))" aria-label="Cancel">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn  Width="50px" Sortable="false" Resizable="false">
                <Template Context="contactModel">
                    <Gravatar AlternateText="pas d'image" Email="@(contactModel.Name + contactModel.Surname)"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Surname" Title="Nom" Frozen="true" Width="160px" Resizable="false">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Surname" Style="width:140px; display: block" Name="Surname"/>
                    <RadzenRequiredValidator Text="Champ requis" Component="Surname" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Name" Title="Prénom" Frozen="true" Width="160px" Resizable="false">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Name" Style="width:140px; display: block" Name="Name"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Company" Title="Entreprise" Width="160px">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Company" Style="width:140px; display: block" Name="Compagny"/>
                    <RadzenRequiredValidator Text="Champ requis" Component="Compagny" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Phone1" Title="Telephone 1"
                                  FormatString="{0:d}" Width="160px" Filterable="false">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Phone1" Style="width:140px; display: block" Name="Phone1"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Phone2" Title="Telephone 2"
                                  FormatString="{0:d}" Width="160px" Filterable="false">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Phone2" Style="width:140px; display: block" Name="Phone2"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Mail" Title="Mail" Width="160px" Filterable="false">
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Mail" Style="width:140px; display: block" Name="Mail"/>
                    <RadzenEmailValidator Text="mail incorrect" Component="Mail" Popup="true"/>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="Job" Title="Poste" Width="160px" Filterable="false" >
                <EditTemplate Context="contactModel">
                    <RadzenTextBox @bind-Value="contactModel.Job" Style="width:140px; display: block" Name="Job"/>
                </EditTemplate>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@_models" TItem="@ContactModel" class="rz-p-0">
        <Template Context="contact">
            <RadzenCard Style="padding: 10px;margin: 2px ;flex: 1 ;width: 250px; max-width: 250px ;min-width: 250px">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                        <RadzenIcon Icon="@(contact.Ismale?"boy":"girl")" IconColor="@Colors.Secondary" Style="font-size: 50px"></RadzenIcon>
                        <Gravatar AlternateText="pas d'image" Email="@(contact.Name + contact.Surname)"/>
                    </RadzenStack>
                    <RadzenStack Gap="0" Style=".rz-p-0">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-0 rz-my-0 ">Nom</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-text-nowrap"><b>@(contact.Surname + " " + contact.Name)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-mb-0">Téléphone</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(!string.IsNullOrEmpty(contact.Phone1) ? contact.Phone1 : ".")</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(!string.IsNullOrEmpty(contact.Phone2) ? contact.Phone2 : ".")</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0 ">Mail</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-text-nowrap"><b>@(!string.IsNullOrEmpty(contact.Mail) ? contact.Mail : ".")</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <hr style="border: none; background-color: var(--rz-primary-light); height: 2px; margin: 3% 0"/>
                <RadzenRow>
                    <RadzenColumn Class="rz-text-truncate rz-text-align-start">
                        <b>@(contact.Company)</b>
                    </RadzenColumn>
                    <RadzenColumn  Class="rz-text-align-end">
                        <RadzenText Text="@contact.Job"/>
                        @* <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", order.Freight)}")/> *@
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code
{
    enum ViewType
    {
        Card,
        Grid
    }

    ViewType _selectedViewType;
    
    RadzenDataGrid<ContactModel>? _radzenDataGrid;
    IEnumerable<ContactModel>? _models;
    bool _isEditMode;

    protected override Task OnInitializedAsync()
    {
        _models = dataBaseService.GetAllContacts();
        return Task.CompletedTask;
    }

    async Task EditRow(ContactModel contactModel)
    {
        if (_radzenDataGrid == null)
        {
            return;
        }

        _isEditMode = true;
        await _radzenDataGrid.EditRow(contactModel);
    }

    async Task DeleteRow(ContactModel contactModel)
    {
        if (_models == null || _radzenDataGrid == null)
        {
            return;
        }

        var result = await dialogService.Confirm("Supprimer ce contact?",
            "Attention",
            new ConfirmOptions { OkButtonText = "Oui", CancelButtonText = "Non" });
        if (result == true)
        {
            if (_models.Contains(contactModel))
            {
                dataBaseService.Remove(contactModel);
                await _radzenDataGrid.Reload();
            }
        }
    }

    async Task SaveRow(ContactModel contactModel)
    {
        if (_radzenDataGrid == null)
        {
            return;
        }

        _isEditMode = false;
        await _radzenDataGrid.UpdateRow(contactModel);
    }

    void CancelEdit(ContactModel contactModel)
    {
        if (_radzenDataGrid == null)
        {
            return;
        }

        _isEditMode = false;
        _radzenDataGrid.CancelEditRow(contactModel);
        var contactEntry = dataBaseService.GetDb.Entry(contactModel);
        if (contactEntry.State != EntityState.Modified) return;
        contactEntry.CurrentValues.SetValues(contactEntry.OriginalValues);
        contactEntry.State = EntityState.Unchanged;
    }

    async Task InsertRow(MouseEventArgs mouseEventArgs)
    {
        if (_radzenDataGrid == null)
        {
            return;
        }

        _isEditMode = true;
        var contactToInsert = new ContactModel();
        await _radzenDataGrid.InsertRow(contactToInsert);
    }

    void OnCreateRow(ContactModel contactModel)
    {
        dataBaseService.Add(contactModel);
    }

    void OnUpdateRow(ContactModel contactModel)
    {
        dataBaseService.Update(contactModel);
        dataBaseService.Save();
    }
}